const { SlashCommandBuilder, PermissionsBitField } = require('discord.js');
const fs = require('fs');
const config = require('../config.json');

const WARN_FILE = './warnings.json';

function loadWarnings() {
  if (!fs.existsSync(WARN_FILE)) return {};
  return JSON.parse(fs.readFileSync(WARN_FILE));
}

function saveWarnings(data) {
  fs.writeFileSync(WARN_FILE, JSON.stringify(data, null, 2));
}

module.exports = {
  data: new SlashCommandBuilder()
    .setName('warn')
    .setDescription('Ø¥Ø¹Ø·Ø§Ø¡ ØªØ­Ø°ÙŠØ± Ù„Ø¹Ø¶Ùˆ')
    .addUserOption(option => option.setName('user').setDescription('Ø§Ù„Ù…Ø³ØªØ®Ø¯Ù…').setRequired(true))
    .addStringOption(option =>
      option.setName('type')
        .setDescription('Ù†ÙˆØ¹ Ø§Ù„ØªØ­Ø°ÙŠØ±')
        .setRequired(true)
        .addChoices(
          { name: 'ØªØ­Ø°ÙŠØ± Ø§Ø¯Ø§Ø±ÙŠ Ø§ÙˆÙ„', value: 'ØªØ­Ø°ÙŠØ± Ø§Ø¯Ø§Ø±ÙŠ Ø§ÙˆÙ„' },
          { name: 'ØªØ­Ø°ÙŠØ± Ø§Ø¯Ø§Ø±ÙŠ Ø«Ø§Ù†ÙŠ', value: 'ØªØ­Ø°ÙŠØ± Ø§Ø¯Ø§Ø±ÙŠ Ø«Ø§Ù†ÙŠ' },
          { name: 'ÙƒØ³Ø± Ø±ØªØ¨Ù‡ Ø¥Ø¯Ø§Ø±ÙŠÙŠÙ‡', value: 'ÙƒØ³Ø± Ø±ØªØ¨Ù‡ Ø¥Ø¯Ø§Ø±ÙŠÙŠÙ‡' }
        )
    ),
  async execute(interaction) {
    const member = interaction.options.getUser('user');
    const type = interaction.options.getString('type');
    const roleId = config.warningRoleIds[type];
    const guild = interaction.guild;
    const target = await guild.members.fetch(member.id);
    
    if (!interaction.member.roles.cache.some(r => config.warnManagers.includes(r.id))) {
      return interaction.reply({ content: 'Ù„ÙŠØ³ Ù„Ø¯ÙŠÙƒ ØµÙ„Ø§Ø­ÙŠØ© Ø§Ø³ØªØ®Ø¯Ø§Ù… Ù‡Ø°Ø§ Ø§Ù„Ø£Ù…Ø±.', ephemeral: true });
    }

    const role = guild.roles.cache.get(roleId);
    if (!role) return interaction.reply({ content: 'Ù„Ù… ÙŠØªÙ… Ø§Ù„Ø¹Ø«ÙˆØ± Ø¹Ù„Ù‰ Ø§Ù„Ø±ØªØ¨Ø©.', ephemeral: true });

    await target.roles.add(role);

    const warnings = loadWarnings();
    warnings[member.id] = warnings[member.id] || [];
    warnings[member.id].push({ type, date: new Date().toISOString(), by: interaction.user.id });
    saveWarnings(warnings);

    const logChannel = guild.channels.cache.get(config.logChannelId);
    if (logChannel) {
      logChannel.send(`ðŸš¨ ${member.tag} Ø­ØµÙ„ Ø¹Ù„Ù‰: ${type} Ø¨ÙˆØ§Ø³Ø·Ø© ${interaction.user.tag}`);
    }

    await interaction.reply({ content: `${member.tag} ØªÙ… Ø¥Ø¹Ø·Ø§Ø¤Ù‡ ØªØ­Ø°ÙŠØ±: ${type}` });
  }
};